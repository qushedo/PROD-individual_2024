package functions

import (
	"backend-qushedo/database"
	"backend-qushedo/keyboards"
	"backend-qushedo/models"
	"backend-qushedo/states"
	"fmt"
	"github.com/doppiogancio/go-nominatim/shared"
	tb "gopkg.in/telebot.v3"
	"log"
)

var (
	selectorStart = &tb.ReplyMarkup{}
	btnStart      = selectorStart.Data("–ü–æ–≥–Ω–∞–ª–∏!", "start")

	menuGeo      = &tb.ReplyMarkup{ResizeKeyboard: true}
	btnManualGeo = menuGeo.Text("üè† –í–≤–µ–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ")
	btnSendGeo   = menuGeo.Location("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç–∫—É")

	selectorGender = &tb.ReplyMarkup{}
	btnMale        = selectorGender.Data("üë® –ú—É–∂—Å–∫–æ–π", "btnMale")
	btnFemale      = selectorGender.Data("üë© –ñ–µ–Ω—Å–∫–∏–π", "btnFemale")

	selectorGeoIsCorrect = &tb.ReplyMarkup{}
	btnCorrectGeo        = selectorGeoIsCorrect.Data("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "geoIsCorrect")
	btnIncorrectGeo      = selectorGeoIsCorrect.Data("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", "geoIsIncorrect")
)

func SetupGreeting(b *tb.Bot) {
	b.Handle("/start", greeting)
	b.Handle(&btnStart, InputName)
	b.Handle(&btnMale, Male)
	b.Handle(&btnFemale, Female)
	b.Handle(&btnManualGeo, InputGeo)
	b.Handle(&btnCorrectGeo, GeoCorrect)
	b.Handle(&btnIncorrectGeo, GeoIncorrect)

}

func greeting(c tb.Context) error {
	var existingUser models.User
	selectorStart.Inline(
		selectorStart.Row(btnStart),
	)

	stateSent := states.Sent.Map[c.Sender().ID]
	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, c.Message().ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()

	database.DB.Where("tg_id=?", c.Sender().ID).Find(&existingUser)
	if existingUser.TgId == 0 {
		database.DB.Create(models.User{
			TgId:    c.Sender().ID,
			Name:    "",
			Age:     0,
			Bio:     "",
			Address: "",
		})
	} else if existingUser.TgId != 0 && existingUser.Name != "" && existingUser.Age != 0 && existingUser.Bio != "" && existingUser.Address != "" {
		if c.Message().Payload != "" {
			return UseInviteLink(c)
		}
		return MainMenu(c)
	}
	if c.Message().Payload != "" {
		return c.Reply(
			"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ - –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n" +
				"–ê –∑–∞—Ç–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ",
		)
	}

	return c.Send(
		"üëã –ü—Ä–∏–≤–µ—Ç!\n\n"+
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Travel Agent 3.0 ‚úàÔ∏è\n\n"+
			"–í–∞—à –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:\n\n"+
			"üë´ –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏\n"+
			"üîç –ù–∞–π–¥–∏—Ç–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤\n"+
			"üìù –í–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏\n"+
			"üó∫ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç\n"+
			"‚òÄÔ∏è –£–∑–Ω–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–¥—É\n"+
			"üè∞ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞\n\n"+
			"–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!\n\n"+
			"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
		selectorStart,
	)
}

func InputName(c tb.Context) error {
	err := c.Delete()
	if err != nil {
		log.Println(err)
	}
	states.Input.Mx.RLock()
	states.Input.Map[c.Sender().ID] = states.WaitingForName
	states.Input.Mx.RUnlock()

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(), "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func InputAge(c tb.Context) error {
	states.Input.Mx.RLock()
	states.Input.Map[c.Sender().ID] = states.WaitingForAge
	states.Input.Mx.RUnlock()

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(), "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func InputBio(c tb.Context) error {
	states.Input.Mx.RLock()
	states.Input.Map[c.Sender().ID] = states.WaitingForBio
	states.Input.Mx.RUnlock()

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(), "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ")
	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func ChooseGender(c tb.Context) error {
	selectorGender.Inline(
		selectorGender.Row(btnMale, btnFemale),
	)

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(), "üë®üë© –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", selectorGender)
	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func Male(c tb.Context) error {
	_ = c.Delete()
	user, err := database.GetUser(c.Sender().ID)
	if err != nil {
		stateSent := states.Sent.Map[c.Sender().ID]
		sentMsg, errSent := c.Bot().Send(c.Chat(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		states.Sent.Mx.RLock()
		stateSent.SentMessagesId = append(stateSent.SentMessagesId, sentMsg.ID)
		states.Sent.Map[c.Sender().ID] = stateSent
		states.Sent.Mx.RUnlock()

		if errSent != nil {
			log.Println(errSent)
		}
		return InputName(c)
	}
	user.Male = true
	database.DB.Where("tg_id=?", c.Sender().ID).Save(&user)
	return ChooseGeo(c)
}

func Female(c tb.Context) error {
	_ = c.Delete()
	user, err := database.GetUser(c.Sender().ID)
	if err != nil {
		stateSent := states.Sent.Map[c.Sender().ID]
		sentMsg, errSent := c.Bot().Send(c.Chat(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		states.Sent.Mx.RLock()
		stateSent.SentMessagesId = append(stateSent.SentMessagesId, sentMsg.ID)
		states.Sent.Map[c.Sender().ID] = stateSent
		states.Sent.Mx.RUnlock()

		if errSent != nil {
			log.Println(errSent)
		}
		return InputName(c)
	}
	user.Male = false
	database.DB.Where("tg_id=?", c.Sender().ID).Save(&user)
	return ChooseGeo(c)
}

func ChooseGeo(c tb.Context) error {
	menuGeo.Reply(
		menuGeo.Row(btnManualGeo),
		menuGeo.Row(btnSendGeo),
	)

	states.Input.Mx.RLock()
	states.Input.Map[c.Sender().ID] = states.WaitingForGeo
	states.Input.Mx.RUnlock()

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(),
		"üåê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:\n\n"+
			"- üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç–∫—É.\n"+
			"- üè† –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.",
		menuGeo,
	)

	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func InputGeo(c tb.Context) error {

	err := c.Delete()
	if err != nil {
		log.Println(err)
	}

	stateSent := states.Sent.Map[c.Sender().ID]
	msg, err := c.Bot().Send(c.Chat(),
		"üåç –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º\n\n"+
			"–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è) \n\n"+
			"–ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n\n"+
			"–ì–æ—Ä–æ–¥, –†–∞–π–æ–Ω, –û–±–ª–∞—Å—Ç—å, –°—Ç—Ä–∞–Ω–∞", keyboards.EmptyMenu,
	)

	states.Sent.Mx.RLock()
	stateSent.SentMessagesId = append(stateSent.SentMessagesId, msg.ID)
	states.Sent.Map[c.Sender().ID] = stateSent
	states.Sent.Mx.RUnlock()
	return err
}

func IsGeoCorrect(c tb.Context, address shared.Address, coordinate shared.Coordinate) error {
	userId := c.Sender().ID
	selectorGeoIsCorrect.Inline(
		selectorGeoIsCorrect.Row(btnCorrectGeo, btnIncorrectGeo),
	)
	user, err := database.GetUser(userId)
	if err != nil {
		log.Println(err)
	}
	user.Address = address.DisplayName
	user.Latitude = coordinate.Latitude
	user.Longitude = coordinate.Longitude

	database.DB.Where("tg_id=?", userId).Save(&user)

	return c.Send(
		fmt.Sprintf("üìç –í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è:\n\n%s\n\n‚úÖ –≠—Ç–æ –≤–µ—Ä–Ω–æ?", address.DisplayName),
		selectorGeoIsCorrect,
	)

}

func GeoCorrect(c tb.Context) error {
	_, err := database.GetUserHard(c.Sender().ID)
	if err != nil {
		return err
	}

	_ = c.Delete()

	return MainMenu(c)
}

func GeoIncorrect(c tb.Context) error {
	err := c.Delete()
	if err != nil {
		return err
	}

	userId := c.Sender().ID
	user, err := database.GetUser(userId)
	if err != nil {
		log.Println(err)
	}
	user.Address = ""
	database.DB.Where("tg_id=?", userId).Save(&user)
	return ChooseGeo(c)
}
